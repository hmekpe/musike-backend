version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: musike-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: Musike
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-053}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - musike-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d Musike"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: musike-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - musike-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Musike Backend Application
  musike-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: musike-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/Musike
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-053}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      
      # Server Configuration
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: prod
      
      # Logging Configuration
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_FILE_NAME: /app/logs/musike-backend.log
      
      # CORS Configuration
      SPRING_WEB_CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8081}
      SPRING_WEB_CORS_ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS
      SPRING_WEB_CORS_ALLOWED_HEADERS: "*"
      
      # Actuator Configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when-authorized
      
      # Redis Configuration (if using Redis)
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # JVM Options
      JAVA_OPTS: "-Xms512m -Xmx1024m -XX:+UseG1GC -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    networks:
      - musike-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: musike-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - musike-network
    depends_on:
      - musike-backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  musike-network:
    driver: bridge